%%LEX
%literals : ['+','-','/','*','=','(',')']
%ignore :' \t\n'
%reserved:
IF:'if'
THEN:'then'
%states:
exclusive: 'foo1', 'foo2'
inclusive: 'bar'
%tokens:
VAR:'[a-zA-Z_][a-zA-Z0-9_]*'   (foo1)
    return t
NUMBER:'\d+(\.\d+)?'
    t.value = float(t.value)
    return t

%eof:
    more = raw_input('... ')
    if more:
        self.lexer.input(more)
        return self.lexer.token()
    return None
%error:
    f"Illegal character '{t.value[0]}', [{t.lexer.lineno}]"
    t.lexer.skip(1)

%code:
    lexer = lex.lex()

%%YACC
%start:'start'
%prec:
'+','-' : left
'*','/' : left
'UMINUS' : right

%grammar:
Stat -> "VAR '=' Exp" {ts[p[1]] = p[3]}
    | "Exp" {print(p[1])}

Exp -> "Exp '+' Exp"
    | "Exp '-' Exp" {p[0] = p[1] - p[3]}
    | "Exp '*' Exp" {p[0] = p[1] * p[3]}
    | "Exp '/' Exp" {p[0] = p[1] / p[3]}
    | "'-' Exp %prec UMINUS" {p[0] = -p[2]}
    | "'(' Exp ')'" {p[0] = p[2]}
    | "NUMBER" {p[0] = p[1]}
    | "VAR" {p[0] = getval(p[1])}
    | "Exp2" {p[0] = ''}

Exp2 -> "NUMBER '-' '-' NUMBER" 
    | "NUMBER '+' '+' NUMBER"
    | "NUMBER"
    {for i in range(3):
        print("test")
    }
    | " " {print("Hello World!")}

%error:
    print(f"Syntax error at '{p.value}', [{p.lexer.lineno}]")

%code:
    ts = {}
    def getval(n):
        if n not in ts: print(f"Undefined name '{n}'")
        return ts.get(n,0)

    y=yacc.yacc()
    y.parse("3+4*7")
